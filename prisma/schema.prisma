generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id          Int      @id @default(autoincrement())
    name        String   @db.VarChar(50)
    lastname    String   @db.VarChar(50)
    email       String   @unique
    password    String
    publicEmail Boolean  @default(false)
    role        Role     @default(USER)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())

    comments        Comment[]
    posts           Post[]
    likesOnComments LikesOnComments[]
    likesOnPosts    LikesOnPosts[]
	reports			Report[]
}

model Comment {
    id        Int           @id @unique @default(autoincrement())
    content   String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now())
    status    ContentStatus @default(PUBLISHED)

	reports Report?

    author    Account @relation(fields: [accountId], references: [id])
    accountId Int     @unique

    post   Post @relation(fields: [postId], references: [id])
    postId Int

    likesOnComments LikesOnComments[]
}

model Post {
    id        Int      @id @unique @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

	reports Report?

    author    Account @relation(fields: [accountId], references: [id])
    accountId Int     @unique

    comments     Comment[]
    likesOnPosts LikesOnPosts[]
}

model Report {
	id Int @unique @default(autoincrement())
	description String
	createdAt DateTime      @default(now())

	author   Account @relation(fields: [authorId], references: [id])
    authorId Int

	comment  Comment @relation(fields: [commentId], references: [id])
    commentId Int @unique

	post   Post @relation(fields: [postId], references: [id])
    postId Int @unique

	@@id([id, authorId, commentId, postId])

}

model LikesOnComments {
    id Int @unique @default(autoincrement())

    comment   Comment @relation(fields: [commentId], references: [id])
    commentId Int

    author   Account @relation(fields: [authorId], references: [id])
    authorId Int

    @@id([id, authorId, commentId])
}

model LikesOnPosts {
    id Int @unique @default(autoincrement())

    post   Post @relation(fields: [postId], references: [id])
    postId Int

    author   Account @relation(fields: [authorId], references: [id])
    authorId Int     @unique

    @@id([id, postId, authorId])
}

enum ContentStatus {
    DRAFT
    PUBLISHED
}

enum Role {
    MODERATOR
    USER
}
