generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id              Int      @id @default(autoincrement())
    name            String   @db.VarChar(50)
    lastname        String   @db.VarChar(50)
    email           String   @unique
    password        String
    role            Role     @default(USER)
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    is_public_email Boolean  @default(false)
    is_public_name  Boolean  @default(false)

    comments          Comment[]
    posts             Post[]
    reports           Report[]
    likes_on_comments LikesOnComments[]
    likes_on_posts    LikesOnPosts[]
}

model Comment {
    id         Int           @id @unique @default(autoincrement())
    content    String
    status     ContentStatus @default(PUBLISHED)
    created_at DateTime      @default(now())
    updated_at DateTime      @default(now())

    reports Report?

    author     Account @relation(fields: [account_id], references: [id])
    account_id Int     @unique

    post    Post @relation(fields: [post_id], references: [id])
    post_id Int

    likes_on_comments LikesOnComments[]
}

model Post {
    id         Int           @id @unique @default(autoincrement())
    content    String
    status     ContentStatus @default(PUBLISHED)
    created_at DateTime      @default(now())
    updated_at DateTime      @default(now())

    reports Report?

    author     Account @relation(fields: [account_id], references: [id])
    account_id Int     @unique

    comments       Comment[]
    likes_on_posts LikesOnPosts[]
}

model Report {
    id          Int      @unique @default(autoincrement())
    description String
    created_at  DateTime @default(now())

    author   Account @relation(fields: [authorId], references: [id])
    authorId Int

    comment   Comment @relation(fields: [commentId], references: [id])
    commentId Int     @unique

    post    Post @relation(fields: [post_id], references: [id])
    post_id Int  @unique

    @@id([id, authorId, commentId, post_id])
}

model LikesOnComments {
    id Int @unique @default(autoincrement())

    comment   Comment @relation(fields: [commentId], references: [id])
    commentId Int

    author   Account @relation(fields: [authorId], references: [id])
    authorId Int

    @@id([id, authorId, commentId])
}

model LikesOnPosts {
    id Int @unique @default(autoincrement())

    post    Post @relation(fields: [post_id], references: [id])
    post_id Int

    author   Account @relation(fields: [authorId], references: [id])
    authorId Int     @unique

    @@id([id, post_id, authorId])
}

enum ContentStatus {
    DRAFT
    PUBLISHED
}

enum Role {
    MODERATOR
    USER
}
