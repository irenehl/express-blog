generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id            Int           @id @default(autoincrement())
    name          String        @db.VarChar(50)
    lastname      String        @db.VarChar(50)
    email         String        @unique
    password      String
    role          Role          @default(USER)
    createdAt     DateTime      @default(now()) @map("created_at")
    updatedAt     DateTime      @default(now()) @map("updated_at")
    isPublicEmail Boolean       @default(false) @map("is_public_email")
    isPublicName  Boolean       @default(false) @map("is_public_name")

    comments          Comment[]
    posts             Post[]
    reports           Report[]
    likesOnComments   LikesOnComments[]
    likesOnPosts      LikesOnPosts[]
}

model Comment {
    id          Int               @id @unique @default(autoincrement())
    content     String
    status      ContentStatus     @default(PUBLISHED)
    createdAt   DateTime          @default(now()) @map("created_at")
    updatedAt   DateTime          @default(now()) @map("updated_at")

    reports     Report?

    author      Account           @relation(fields: [authorId], references: [id])
    authorId   Int                @map("author_id")

    post        Post              @relation(fields: [postId], references: [id])
    postId      Int               @map("post_id")

    likesOnComments LikesOnComments[]
}

model Post {
    id        Int           @id @unique @default(autoincrement())
    content   String
    status    ContentStatus @default(PUBLISHED)
    createdAt DateTime      @default(now()) @map("created_at")
    updatedAt DateTime      @default(now()) @map("updated_at")

    reports   Report?

    author    Account       @relation(fields: [authorId], references: [id])
    authorId  Int           @map("author_id")

    comments       Comment[]
    likesOnPosts   LikesOnPosts[]
}

model Report {
    id            Int         @unique @default(autoincrement())
    description   String
    createdAt     DateTime    @default(now()) @map("created_at")

    author        Account     @relation(fields: [authorId], references: [id])
    authorId      Int         @map("author_id")

    comment       Comment     @relation(fields: [commentId], references: [id])
    commentId     Int         @unique @map("comment_id")

    post          Post        @relation(fields: [postId], references: [id])
    postId        Int         @unique @map("post_id")

    @@id([id, authorId, commentId, postId])
}

model LikesOnComments {
    id            Int          @unique @default(autoincrement())

    comment       Comment      @relation(fields: [commentId], references: [id])
    commentId     Int          @map("comment_id")

    author        Account      @relation(fields: [authorId], references: [id])
    authorId      Int          @map("author_id")

    @@id([id, authorId, commentId])
}

model LikesOnPosts {
    id             Int         @unique @default(autoincrement())

    post           Post        @relation(fields: [postId], references: [id])
    postId         Int         @map("post_id")

    author         Account     @relation(fields: [authorId], references: [id])
    authorId       Int         @map("author_id")

    @@id([id, postId, authorId])
}

enum ContentStatus {
    DRAFT
    PUBLISHED
}

enum Role {
    MODERATOR
    USER
}
